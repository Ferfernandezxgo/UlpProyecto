/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package universidadejemploparami.vistas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import universidadejemploparami.accesoadatos.AlumnoData;
import universidadejemploparami.accesoadatos.InscripcionData;


import universidadejemploparami.accesoadatos.MateriaData;
import universidadejemploparami.entidades.Alumno;
import universidadejemploparami.entidades.Inscripcion;
import universidadejemploparami.entidades.Materia;


public class FormularioNotas extends javax.swing.JInternalFrame {

    private List<Materia> listaM;
    private List<Alumno>  listaA;
    
    private MateriaData mData;
    private AlumnoData  aData;
    private DefaultTableModel modelo;
    private InscripcionData inscData;
    
    
    public FormularioNotas() {
        initComponents();
        aData=new AlumnoData();
        listaA=new ArrayList<>();
        listaA=aData.listarAlumnos();
        modelo=new DefaultTableModel();
        inscData=new InscripcionData();
        Alumno alumno=new Alumno();
        mData=new MateriaData();
        
        
        // Agrega un ActionListener al JComboBox jcboxAlumnos
        jcboxAlumnos.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
             Alumno alumnoSeleccionado = (Alumno)jcboxAlumnos.getSelectedItem();
             if (alumnoSeleccionado!=null) {
                cargarDatosNotas(alumnoSeleccionado);
                } else {
                  JOptionPane.showMessageDialog(null, closable, "no se encontro ningun alumno valido", HEIGHT, frameIcon);  // Manejar el caso cuando no se selecciona ningún alumno válido.
        }
        }
        });
        
        cargaAlumnos();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jcboxAlumnos = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaAlumnos = new javax.swing.JTable();
        jbGuardar = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(0, 153, 102));
        jLabel1.setFont(new java.awt.Font("Roboto Serif 20pt", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Carga de notas");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 150, -1));

        jLabel2.setFont(new java.awt.Font("Roboto Serif 20pt", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 204));
        jLabel2.setText("Seleccione un alumno");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 210, -1));

        jPanel1.add(jcboxAlumnos, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 70, 260, -1));

        jtTablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtTablaAlumnos);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 150, -1, 110));

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(jbGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private int obtenerIdInscripcionDesdeModelo(int filaSeleccionada) {
    // Supongamos que tu tabla tiene un DefaultTableModel y que la primera columna contiene el ID de inscripción
    DefaultTableModel modelo = (DefaultTableModel) jtTablaAlumnos.getModel();
    return (int) modelo.getValueAt(filaSeleccionada, 0); // Reemplaza 0 con el índice de la columna que contiene el ID de inscripción en tu tabla.
}
    
    
    
    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // Obtén el índice de la fila y la columna seleccionada
    int filaSeleccionada = jtTablaAlumnos.getSelectedRow();
    int columnaNota = jtTablaAlumnos.getColumnModel().getColumnIndex("Nota"); // Reemplaza "Nota" con el nombre de la columna de notas en tu tabla.

    // Verifica si se ha seleccionado una fila y que la columna seleccionada sea la de la nota
    if (filaSeleccionada != -1 && columnaNota != -1) {
        // Reemplaza esta línea con la lógica para obtener la nueva nota que deseas establecer en la celda
        double nuevaNota = Double.parseDouble(JOptionPane.showInputDialog(this, "Ingrese la nueva nota:"));

        // Modifica la nota directamente en la celda de la tabla
        jtTablaAlumnos.setValueAt(nuevaNota, filaSeleccionada, columnaNota);

        // Obtén el ID de inscripción desde tu modelo de tabla o desde los datos subyacentes
        int idInscripcion = obtenerIdInscripcionDesdeModelo(filaSeleccionada);

        // Llama al método actualizarNota() de la instancia de InscripcionData para actualizar la nota en la base de datos
        InscripcionData inscripcionData = new InscripcionData(); // Crea una instancia de InscripcionData
        inscripcionData.actualizarNota(idInscripcion, nuevaNota);

        // Agrega aquí cualquier lógica adicional que desees después de actualizar la nota.
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, selecciona una fila en la tabla y asegúrate de estar en la columna de la nota.");
    }

    }//GEN-LAST:event_jbGuardarActionPerformed


    
    private void armarCabecera(){
        ArrayList<Object> filaCabecera=new ArrayList<>();
        filaCabecera.add("ID");
        filaCabecera.add("Nombre");
        filaCabecera.add("Nota");
        
        for(Object it: filaCabecera){
            modelo.addColumn(it);
            
            
        }
        jtTablaAlumnos.setModel(modelo);
        
        
    }
    
    private void cargaAlumnos(){
        
        for (Alumno item : listaA) {
        jcboxAlumnos.addItem(item); // Agrega instancias de Alumno directamente
    }
    }
    
    
    
    private void cargarDatosNotas(Alumno alumno) {
    // Borra todas las filas existentes en el modelo de la tabla
    modelo.setRowCount(0);
    List<Inscripcion> inscripciones = inscData.obtenerInscripcionesPorAlumno(alumno.getIdAlumno());
    System.out.println("Cantidad de inscripciones para el alumno: " + inscripciones.size());

    // Agrega las notas al modelo de la tabla
    for (Inscripcion inscripcion : inscripciones) {
        modelo.addRow(new Object[]{inscripcion.getIdInscripcion(), inscripcion.getMateria().getNombre(), inscripcion.getNota()});
    }
 
    
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JComboBox<Alumno> jcboxAlumnos;
    private javax.swing.JTable jtTablaAlumnos;
    // End of variables declaration//GEN-END:variables
}
